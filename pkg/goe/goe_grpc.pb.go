// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RandomerClient is the client API for Randomer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomerClient interface {
	GenerateRandom(ctx context.Context, in *RandomRequest, opts ...grpc.CallOption) (*RandomReply, error)
}

type randomerClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomerClient(cc grpc.ClientConnInterface) RandomerClient {
	return &randomerClient{cc}
}

func (c *randomerClient) GenerateRandom(ctx context.Context, in *RandomRequest, opts ...grpc.CallOption) (*RandomReply, error) {
	out := new(RandomReply)
	err := c.cc.Invoke(ctx, "/goe.Randomer/GenerateRandom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RandomerServer is the server API for Randomer service.
// All implementations must embed UnimplementedRandomerServer
// for forward compatibility
type RandomerServer interface {
	GenerateRandom(context.Context, *RandomRequest) (*RandomReply, error)
	mustEmbedUnimplementedRandomerServer()
}

// UnimplementedRandomerServer must be embedded to have forward compatible implementations.
type UnimplementedRandomerServer struct {
}

func (UnimplementedRandomerServer) GenerateRandom(context.Context, *RandomRequest) (*RandomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRandom not implemented")
}
func (UnimplementedRandomerServer) mustEmbedUnimplementedRandomerServer() {}

// UnsafeRandomerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandomerServer will
// result in compilation errors.
type UnsafeRandomerServer interface {
	mustEmbedUnimplementedRandomerServer()
}

func RegisterRandomerServer(s grpc.ServiceRegistrar, srv RandomerServer) {
	s.RegisterService(&Randomer_ServiceDesc, srv)
}

func _Randomer_GenerateRandom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomerServer).GenerateRandom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goe.Randomer/GenerateRandom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomerServer).GenerateRandom(ctx, req.(*RandomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Randomer_ServiceDesc is the grpc.ServiceDesc for Randomer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Randomer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goe.Randomer",
	HandlerType: (*RandomerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateRandom",
			Handler:    _Randomer_GenerateRandom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/goe/goe.proto",
}
